# MPRNet - Guide d'Installation et d'Ex√©cution
# ==============================================

## CHOIX D'EX√âCUTION

Ce projet peut √™tre ex√©cut√© de deux fa√ßons :
1. **EX√âCUTION LOCALE** : Sur votre machine personnelle
2. ** OPTIMISATION SUR KAGGLE** : Pour l'entra√Ænement avec GPU gratuit(Optimisation d une partie de code origine (deblurring))

---

#  PARTIE 1 : EX√âCUTION LOCALE

- Telecharger le code  source de l article :https://github.com/swz30/MPRNet.git

##  Pr√©requis Syst√®me

### Syst√®me d'exploitation support√©
- Windows 10/11
- macOS 10.15+ (Catalina ou plus r√©cent)
- Linux (Ubuntu 18.04+, CentOS 7+, etc.)

### Mat√©riel recommand√©
- **CPU**: Processeur multi-c≈ìurs (Intel i5/AMD Ryzen 5 ou mieux)
- **RAM**: 16 GB minimum (32 GB recommand√©)
- **GPU**: NVIDIA GPU avec CUDA (optionnel mais fortement recommand√©)
- **Espace disque**: 20 GB minimum pour les datasets et mod√®les

##  Installation de Python

### Option 1: Anaconda (Recommand√©)
```bash
# T√©l√©charger Anaconda depuis https://www.anaconda.com/products/distribution
# Installer avec l'interface graphique ou via ligne de commande

# Cr√©er un environnement virtuel
conda create -n mprnet python=3.9
conda activate mprnet
```

### Option 2: Python standard
```bash
# Installer Python 3.9+ depuis https://www.python.org/downloads/
# V√©rifier l'installation
python --version
pip --version

# Cr√©er un environnement virtuel
python -m venv mprnet_env
# Windows
mprnet_env\Scripts\activate
# macOS/Linux
source mprnet_env/bin/activate
```

##  Installation des D√©pendances

### Installation automatique (Recommand√©e)
```bash
# Naviguer vers le dossier du projet
cd /Users/hicham/Downloads/miniprojet

# Installer toutes les d√©pendances
pip install -r requirements.txt
```

### Installation manuelle
```bash
# PyTorch (choisir selon votre configuration)
# Pour CPU uniquement
pip install torch torchvision torchaudio

# Pour GPU NVIDIA avec CUDA 11.6
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu116

# Pour GPU NVIDIA avec CUDA 11.8
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# Autres d√©pendances
pip install opencv-python Pillow scikit-image numpy scipy PyYAML tqdm jupyter matplotlib seaborn psutil
```

##  Configuration GPU (Optionnel)

### V√©rifier la disponibilit√© CUDA
```python
import torch
print(f"CUDA disponible: {torch.cuda.is_available()}")
print(f"Nombre de GPU: {torch.cuda.device_count()}")
if torch.cuda.is_available():
    print(f"GPU actuel: {torch.cuda.get_device_name(0)}")
```

### Pour macOS avec GPU Apple Silicon
```bash
# PyTorch avec support MPS (Metal Performance Shaders)
pip install torch torchvision torchaudio
```

## üìÅ Pr√©paration des Datasets

### Structure des dossiers requise
```
miniprojet/
‚îú‚îÄ‚îÄ mini-projet.ipynb
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ how_to_install.txt
‚îú‚îÄ‚îÄ MPRNet-main/
‚îÇ   ‚îú‚îÄ‚îÄ Deblurring/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Datasets/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ GoPro/
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ train/
‚îÇ   ‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ input/
‚îÇ   ‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ target/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ test/
‚îÇ   ‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ input/
‚îÇ   ‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ target/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ HIDE/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ test/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ RealBlur_J/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ test/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ RealBlur_R/
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ test/
‚îÇ   ‚îú‚îÄ‚îÄ Denoising/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Datasets/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ SIDD/
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ train/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ val/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ DND/
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ test/
‚îÇ   ‚îî‚îÄ‚îÄ Deraining/
‚îÇ       ‚îî‚îÄ‚îÄ Datasets/
‚îÇ           ‚îî‚îÄ‚îÄ Synthetic_Rain_Datasets/
‚îÇ               ‚îú‚îÄ‚îÄ train/
‚îÇ               ‚îî‚îÄ‚îÄ test/
‚îÇ                   ‚îú‚îÄ‚îÄ Test100/
‚îÇ                   ‚îú‚îÄ‚îÄ Rain100H/
‚îÇ                   ‚îú‚îÄ‚îÄ Rain100L/
‚îÇ                   ‚îú‚îÄ‚îÄ Test1200/
‚îÇ                   ‚îî‚îÄ‚îÄ Test2800/
```

### Liens de T√©l√©chargement des Datasets

#### 1. **GoPro Dataset** (Deblurring)
- **Train**: https://drive.google.com/drive/folders/1AsgIP9_X0bg0olu2-1N6karm2x15cJWE?usp=sharing
- **Test**: https://drive.google.com/drive/folders/1a2qKfXWpNuTGOm2-Jex8kfNSzYJLbqkf?usp=sharing
- **Extraire dans**: `MPRNet-main/Deblurring/Datasets/GoPro/`

#### 2. **HIDE Dataset** (Deblurring)
- **Test**: https://drive.google.com/drive/folders/1nRsTXj4iTUkTvBhTcGg8cySK8nd3vlhK?usp=sharing
- **Extraire dans**: `MPRNet-main/Deblurring/Datasets/HIDE/test/`

#### 3. **RealBlur-J Dataset** (Deblurring)
- **Test**: https://drive.google.com/drive/folders/1KYtzeKCiDRX9DSvC-upHrCqvC4sPAiJ1?usp=sharing
- **Extraire dans**: `MPRNet-main/Deblurring/Datasets/RealBlur_J/test/`

#### 4. **RealBlur-R Dataset** (Deblurring)
- **Test**: https://drive.google.com/drive/folders/1EwDoajf5nStPIAcU4s9rdc8SPzfm3tW1?usp=sharing
- **Extraire dans**: `MPRNet-main/Deblurring/Datasets/RealBlur_R/test/`

#### 5. **SIDD Dataset** (Denoising)
- **Train**: https://www.eecs.yorku.ca/~kamel/sidd/dataset.php
- **Val**: https://drive.google.com/drive/folders/1S44fHXaVxAYW3KLNxK41NYCnyX9S79su?usp=sharing
- **Test**: https://www.eecs.yorku.ca/~kamel/sidd/benchmark.php
- **Extraire dans**: `MPRNet-main/Denoising/Datasets/SIDD/`

#### 6. **DND Dataset** (Denoising)
- **Test**: https://noise.visinf.tu-darmstadt.de/downloads/
- **Extraire dans**: `MPRNet-main/Denoising/Datasets/DND/test/`

#### 7. **Synthetic Rain Datasets** (Deraining)
- **Train**: https://drive.google.com/drive/folders/1Hnnlc5kI0v9_BtfMytC2LR5VpLAFZtVe?usp=sharing
- **Test**: https://drive.google.com/drive/folders/1PDWggNh8ylevFmrjo-JEvlmqsDlWWvZs?usp=sharing
- **Extraire dans**: `MPRNet-main/Deraining/Datasets/Synthetic_Rain_Datasets/`

###  Mod√®les Pr√©-entra√Æn√©s

#### Mod√®les MPRNet Pr√©-entra√Æn√©s
- **Deblurring**: https://drive.google.com/file/d/1QwQUVbk6YVOJViCsOKYNykCsdJSVGRtb/view?usp=sharing
- **Denoising**: https://drive.google.com/file/d/1LODPt9kYmxwU98g96UrRA0_Eh5HYcsRw/view?usp=sharing
- **Deraining**: https://drive.google.com/file/d/1O3WEJbcat7eTY6doXWeorAbQ1l_WmMnM/view?usp=sharing

##  Ex√©cution du Code Local

### Option 1: Jupyter Notebook (Recommand√©)
```bash
# D√©marrer Jupyter
jupyter notebook

# Ouvrir le fichier mini-projet.ipynb
# Ex√©cuter toutes les cellules (Cell > Run All)
```

### Option 2: Script Python
```bash
# Convertir le notebook en script Python
jupyter nbconvert --to script mini-projet.ipynb

# Ex√©cuter le script
python mini-projet.py
```

### Option 3: Ex√©cution par modules
```bash
# Pour le d√©blurrage
cd MPRNet-main/Deblurring
python train.py

# Pour le d√©bruitage
cd MPRNet-main/Denoising
python train.py

# Pour la suppression de pluie
cd MPRNet-main/Deraining
python train.py
```

---

# ‚òÅÔ∏è PARTIE 2 : OPTIMISATION SUR KAGGLE

## Avantages de Kaggle
- **GPU gratuit** : Tesla T4, P100, V100
- **Environnement pr√©-configur√©** : PyTorch, OpenCV, etc.
- **Datasets int√©gr√©s** : Acc√®s facile aux datasets populaires
- **Temps d'ex√©cution** : 9h par session (30h/semaine)

## üìù Pr√©paration pour Kaggle

### 1. Cr√©er un compte Kaggle
- Aller sur https://www.kaggle.com/
- Cr√©er un compte et v√©rifier l'email
- Accepter les conditions d'utilisation

### 2. Activer les GPU
- Aller dans Settings > Accelerator
- S√©lectionner "GPU T4 x2" ou "GPU P100" (selon disponibilit√©)
- **Important** : Les GPU sont limit√©s √† 30h/semaine

### 3. Cr√©er un nouveau Notebook
- Cliquer sur "New Notebook"
- Choisir "Notebook" (pas "Script")
- S√©lectionner "Python" comme langage

## üìÅ Upload des Fichiers sur Kaggle

### M√©thode 1: Upload direct
1. Cliquer sur "Add Data" dans votre notebook
2. S√©lectionner "Upload" 
3. Uploader les fichiers suivants :
   - `mini-projet.ipynb`
   - `MPRNet-main/` (dossier complet)
   - `requirements.txt` (optionnel)

### M√©thode 2: Via Kaggle Datasets
1. Cr√©er un nouveau dataset sur Kaggle
2. Uploader tous les fichiers du projet
3. Ajouter le dataset √† votre notebook

## üîó Datasets Kaggle Recommand√©s

### Datasets MPRNet disponibles sur Kaggle
Rechercher et ajouter ces datasets √† votre notebook :

1. **GoPro Dataset** :
   - Rechercher "GoPro deblurring dataset"
   - Ajouter le dataset officiel


### Configuration des chemins pour Kaggle
```python
# Dans le notebook Kaggle, modifier les chemins :
train_dir = '/kaggle/input/gopro-training'  # Chemin Kaggle
val_dir = '/kaggle/input/gopro-training'    # Chemin Kaggle


## Configuration Optimis√©e pour Kaggle

### Param√®tres recommand√©s pour Kaggle
```python
# Configuration optimis√©e pour GPU Kaggle
batch_size = 16          # Optimis√© pour T4
num_epochs = 100         # Limit√© par le temps
lr_initial = 2e-4        # Taux d'apprentissage
train_ps = 256           # Taille des patches
val_ps = 256             # Taille de validation

# Configuration GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
if torch.cuda.device_count() > 1:
    model = torch.nn.DataParallel(model)
```

### Optimisation m√©moire Kaggle
```python
# Param√®tres pour √©viter les erreurs de m√©moire
torch.backends.cudnn.benchmark = True
torch.backends.cudnn.deterministic = False

# Nettoyage m√©moire
torch.cuda.empty_cache()

# Monitoring GPU
print(f"GPU utilis√©: {torch.cuda.get_device_name(0)}")
print(f"M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
```

